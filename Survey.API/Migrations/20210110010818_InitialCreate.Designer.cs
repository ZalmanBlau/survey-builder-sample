// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.API.Entities;

namespace Survey.API.Migrations
{
    [DbContext(typeof(SurveyDBContext))]
    [Migration("20210110010818_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Survey.API.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsOfferedAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SurveyQuestionID");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("Survey.API.Entities.Survey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestionAnswerResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("QuestionAnswerID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionResponseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuestionAnswerID");

                    b.HasIndex("SurveyQuestionResponseID");

                    b.ToTable("SurveyQuestionAnswerResponse");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestionResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SurveyQuestionID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyResponseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SurveyQuestionID");

                    b.HasIndex("SurveyResponseID");

                    b.ToTable("SurveyQuestionResponse");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.HasIndex("UserID");

                    b.ToTable("SurveyResponse");
                });

            modelBuilder.Entity("Survey.API.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Survey.API.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("Survey.API.Entities.SurveyQuestion", null)
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Survey.API.Entities.Survey", null)
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestionAnswerResponse", b =>
                {
                    b.HasOne("Survey.API.Entities.QuestionAnswer", "QuestionAnswer")
                        .WithMany()
                        .HasForeignKey("QuestionAnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.API.Entities.SurveyQuestionResponse", "SurveyQuestionResponse")
                        .WithMany("SurveyQuestionAnswerResponses")
                        .HasForeignKey("SurveyQuestionResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");

                    b.Navigation("SurveyQuestionResponse");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestionResponse", b =>
                {
                    b.HasOne("Survey.API.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.API.Entities.SurveyResponse", "SurveyResponse")
                        .WithMany("SurveyQuestionResponses")
                        .HasForeignKey("SurveyResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyResponse", b =>
                {
                    b.HasOne("Survey.API.Entities.Survey", null)
                        .WithMany("SurveyResponses")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Survey.API.Entities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResponses");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyQuestionResponse", b =>
                {
                    b.Navigation("SurveyQuestionAnswerResponses");
                });

            modelBuilder.Entity("Survey.API.Entities.SurveyResponse", b =>
                {
                    b.Navigation("SurveyQuestionResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
